/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 10:13:30 GMT 2021
 */

package evosuiteTests;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import st.OptionMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionMap_ESTest extends OptionMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("XH", "", 4);
      optionMap0.setValueWithOptioShortcut("", "XH");
      assertEquals(1, OptionMap.INTEGER);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "A", 2);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut("V", "A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("hFrE", "W", 4);
      optionMap0.setValueWithOptionName("hFrE", "v\t=XbRppyI4)");
      assertEquals(4, OptionMap.CHAR);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ZE", "W", 4);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("ZE", "ZE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "A", 2);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("A", "A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ivE", "W", 4);
      optionMap0.setValueWithOptionName("ivE", "ivE");
      String string0 = optionMap0.getValue("ivE");
      assertEquals("ivE", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store((String) null, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("XH", "", 1);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"String.contains(java.lang.CharSequence)\"
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option(">dE\fue<vV`Nc3R", (Integer) 2);
      optionMap_Option0.setValue("JDy,3'E");
      assertEquals("JDy,3'E", optionMap_Option0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("", "{p<?A]sRwTR3sa5HS~", (Integer) optionMap0.CHAR);
      String string0 = optionMap_Option0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (String) null, (Integer) optionMap0.CHAR);
      String string0 = optionMap_Option0.getName();
      assertEquals("OptionMap [options=\n]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (Integer) optionMap0.CHAR);
      Integer integer0 = optionMap_Option0.getType();
      assertEquals(4, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (Integer) optionMap0.BOOLEAN);
      String string0 = optionMap_Option0.getShortcut();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("U", (Integer) 4);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("V", "V", (Integer) 3);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, "A", (Integer) 1);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("A", (Integer) 3);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, "BUG NUMBER 2 IS FOUNDED: --<1 points>", (Integer) 1);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option((String) null, (Integer) 4);
      boolean boolean0 = optionMap_Option1.equals(optionMap_Option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("}:", (Integer) 3);
      OptionMap optionMap1 = new OptionMap();
      OptionMap.Option optionMap_Option1 = optionMap1.new Option("}:", (Integer) optionMap1.BOOLEAN);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("W", "amlZeIwQ*CtR)\")A", (Integer) optionMap0.BOOLEAN);
      boolean boolean0 = optionMap_Option0.equals(optionMap0.INTEGER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, "1", (Integer) 1);
      boolean boolean0 = optionMap_Option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("V", (Integer) 4);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("XH", "", 4);
      String string0 = optionMap0.toString();
      assertEquals("OptionMap [options=\n\t{name=XH, shortcut=, type=4, value=}\n]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("c", "V", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("V", ";", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("W", (String) null, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("[", "a", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("", "o=k}AB@", 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("XH", "", 1);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut("", "]G_4TGx-#?8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("i", "XH", 2);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut(".5zX7^N^M9@", "XH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("X", "", 4);
      optionMap0.setValueWithOptioShortcut("&", "&");
      assertEquals(3, OptionMap.STRING);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ivE", "W", 4);
      optionMap0.setValueWithOptionName("}\n", (String) null);
      assertEquals(4, OptionMap.CHAR);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("X", "", 4);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("X", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "ha", 1);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("V", "ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("h", "A", 2);
      int int0 = optionMap0.getType("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "a", 1);
      int int0 = optionMap0.getType("V");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ivE", "W", 4);
      int int0 = optionMap0.getType("W");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      String string0 = optionMap0.getValue("}\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "a", 1);
      optionMap0.store("a", "V", 2);
      // Undeclared exception!
      try { 
        optionMap0.getValue("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ivE", "W", 4);
      String string0 = optionMap0.getValue("W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("V", "W", 4);
      optionMap0.store("V", "", 2);
      assertEquals(3, OptionMap.STRING);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("V", "WQn", 1045);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("I", "I", (-723));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("M+-o\"|AO", "-Axs*15ug", (Integer) optionMap0.INTEGER);
      assertEquals("-Axs*15ug", optionMap_Option0.getShortcut());
      
      optionMap_Option0.setShortcut("M+-o\"|AO");
      assertEquals("M+-o\"|AO", optionMap_Option0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("M+-o\"|AO", "-Axs*15ug", (Integer) optionMap0.STRING);
      assertEquals("M+-o\"|AO", optionMap_Option0.getName());
      
      optionMap_Option0.setName((String) null);
      assertEquals("-Axs*15ug", optionMap_Option0.getShortcut());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("ivE", "W", 4);
      optionMap0.setValueWithOptionName("ivE", "ivE");
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("ivE", "ivE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("4p4", (Integer) 3);
      optionMap_Option0.setType((Integer) 4);
      assertEquals(4, (int)optionMap_Option0.getType());
  }
}
