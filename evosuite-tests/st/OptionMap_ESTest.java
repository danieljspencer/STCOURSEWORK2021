/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 09 10:32:27 GMT 2021
 */

package st;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import st.OptionMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionMap_ESTest extends OptionMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("|XVK[0P0!bow#&", "|XVK[0P0!bow#&", (Integer) 2);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("U", (Integer) 2);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (String) null, (Integer) 3);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option((String) null, (String) null, (Integer) 1);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (Integer) 2);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option("$;>)x", (Integer) 3);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
      assertFalse(optionMap_Option1.equals((Object)optionMap_Option0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap optionMap1 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap1.new Option((String) null, (String) null, (Integer) 3);
      OptionMap.Option optionMap_Option1 = optionMap0.new Option((String) null, (String) null, (Integer) 1);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("r|>PdM^cp,.B", "|Uc- J", (Integer) 4);
      boolean boolean0 = optionMap_Option0.equals("fdU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (Integer) 1);
      boolean boolean0 = optionMap_Option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("$;>)x", (Integer) optionMap0.STRING);
      boolean boolean0 = optionMap_Option0.equals(optionMap_Option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      String string0 = optionMap0.toString();
      assertEquals("OptionMap [options=\n\t{name=U, shortcut=, type=3, value=}\n]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("U", "", 1768);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("U", "", (-49));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("t", "~", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("#", "", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("", "[+|9+", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("t", "", 3);
      optionMap0.setValueWithOptioShortcut("", "t");
      assertEquals(2, OptionMap.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      optionMap0.setValueWithOptioShortcut("U", "U");
      assertEquals(4, OptionMap.CHAR);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "z", 3);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut("U", "z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptioShortcut("", "a+D_X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("fdU", "", 3);
      optionMap0.setValueWithOptionName("", "|Uc- J");
      assertEquals(1, OptionMap.INTEGER);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("U", "U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "z", 3);
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("z", "z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      int int0 = optionMap0.getType("");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      int int0 = optionMap0.getType("U");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("U", "", 3);
      int int0 = optionMap0.getType("r|>PdM^cp,.B");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("z", "V", 3);
      optionMap0.store("V", "z", 3);
      // Undeclared exception!
      try { 
        optionMap0.getValue("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("fdU", "", 3);
      String string0 = optionMap0.getValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("fdU", "", 3);
      String string0 = optionMap0.getValue("fdU");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("fdU", "", 3);
      String string0 = optionMap0.getValue("r|>PdM^cp,.B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("g", "", 3);
      optionMap0.store("g", "", 4);
      assertEquals(4, OptionMap.CHAR);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("epg", (String) null, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("t", "t", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("|XVK[0P0!bow#&", "|XVK[0P0!bow#&", (Integer) 2);
      optionMap_Option0.setShortcut("|XVK[0P0!bow#&");
      assertEquals("|XVK[0P0!bow#&", optionMap_Option0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("h|^Q<a]@d", (Integer) 4);
      optionMap_Option0.setName(" tW~^_n41.g:xJOU");
      assertEquals("", optionMap_Option0.getShortcut());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("fdU", "", 3);
      optionMap0.setValueWithOptionName("fdU", "|Uc- J");
      // Undeclared exception!
      try { 
        optionMap0.setValueWithOptionName("fdU", "|Uc- J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("t2hGp{%N (6U?y~8n", (Integer) 3);
      optionMap_Option0.setType((Integer) 4);
      assertEquals("", optionMap_Option0.getValue());
  }
}
